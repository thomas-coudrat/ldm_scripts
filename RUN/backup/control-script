#!/usr/bin/env bash

#################
# Program paths #
#################

icmdir=/vlsci/VR0024/tcoudrat/bin/icm-3.7-3b
opuspsp=/vlsci/VR0024/tcoudrat/bin/OPUS_PSP
opusrota=/vlsci/VR0024/tcoudrat/bin/OPUS_Rota

##########################
# CLuster job management #
##########################

# Cluster queuing system: SLURM or QSUB
framework=SLURM
# Task name
runname=a2a_3pwh_zm-xxxyyyxxx-
# Username on Cluster
user=tcoudrat

#####################
# Receptor & Ligand #
#####################

# Name of receptor PDB file
receptor=a2a_3pwh_noLoop.pdb
# Name of .mol2 file
ligand=zm2
# Reference name in mol2 file
ligandname=ZM2
# TM start and stops
tm1s=1
tm1e=26
tm2s=27
tm2e=55
tm3s=56
tm3e=89
tm4s=90
tm4e=111
tm5s=112
tm5e=153
tm6s=154
tm6e=192
tm7s=193
tm7e=231
# Position of disulphide between top of tm3 and ecl & others
disul1=a_1/59
disul2=a_1/112
# Residue number of positions where icm searchs in docking
dockingregion=a_1/7,50,51,53,54,63,66,67,70,114,123,127,132,180,183,184,197,200
# Positions of residues where sscomp predicts rotamers
cytoplasmicresidues=16-40,72-102,135-175,206-231

######################
# Runtime parameters #
######################

# Number of seperate dirs to run simulations
dirs=2
# Number of simulations per directory ie dirs x concoordruns is total number of
# conformations sampled per round. Need to have number of runs (5) +1 ie 6
concoordruns=5
concoordsides=10
# RMSD cutoff for concoord (nm)
xxrmsdxx=0.12
# Number of rounds
noofrounds=2
# Sleep times for icm dock, sometimes the runs get stuck and stop the whole
# simulation so this is a stop wait event to terminate individual icm docking
# refinement times if they dont finish ontime (time = x*10 seconds)
sleep1=24
sleep2=24

################
################
# Script start #
################
################

# Reformatting input data from stuff for sccomp into distance restraints for
# concoord and docking pocket search area
res1=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $1}'`
res2=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $2}'`
res3=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $3}'`
res4=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $4}'`
res5=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $5}'`
res6=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $6}'`
res7=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $7}'`
res8=`echo $cytoplasmicresidues | sed -e 's/[a-z]/ /g' -e 's/,/ /g'  -e 's/-/ /g' | awk '{print $8}'`
res1m=`expr $res1 - 1`
res3m=`expr $res3 - 1`
res5m=`expr $res5 - 1`
res7m=`expr $res7 - 1`
res2p=`expr $res2 + 1`
res4p=`expr $res4 + 1`
res6p=`expr $res6 + 1`

###############################
# Changes to external scripts #
###############################

sed "s|ligand|$ligand|g" icm-ligand-dock icm-ligand-dock-refine-score -i
sed -e "s|concoordruns|$concoordruns|g" -e "s|concoordsides|$concoordsides|g" tconcoord-docking* -i
sed "s|xxrmsdxx|$xxrmsdxx|g" tconcoord-docking* -i
sed "s|icmdir|$icmdir|g" initial-docking tconcoord-docking* icm-ligand-dock icm-ligand-dock-refine-score  -i
sed -e "s|sleep1|$sleep1|g" -e "s|sleep2|$sleep2|g" tconcoord-docking* -i
sed -e "s|user|$user|g"  tconcoord-docking* -i
sed -e "s|disul1|$disul1|g" -e "s|disul2|$disul2|g" icm-ligand-dock -i
sed "s|dockingregion|$dockingregion|g" icm-ligand-dock -i
sed "s|cytoplasmicresidues|$cytoplasmicresidues|g" tconcoord-docking* -i
sed "s|opuspsp|$opuspsp|g" config.psp -i
sed "s|receptor|$receptor|g" initial-docking -i
sed "s|xxxreceptorxxx|$receptor|g" tconcoord-docking* -i
sed "s|ligandname|$ligandname|g" initial-docking -i
sed -e "s|tm1s|$tm1s|g"  -e "s|tm1e|$tm1e|g" -e "s|tm2s|$tm2s|g" -e "s|tm2e|$tm2e|g" -e "s|tm3s|$tm3s|g" -e "s|tm3e|$tm3e|g" -e "s|tm4s|$tm4s|g" -e "s|tm4e|$tm4e|g" -e "s|tm5s|$tm5s|g" -e "s|tm5e|$tm5e|g" -e "s|tm6s|$tm6s|g" -e "s|tm6e|$tm6e|g" -e "s|tm7s|$tm7s|g" -e "s|tm7e|$tm7e|g" tconcoord-docking* initial-docking -i
# Only one of SLURM or QSUB is used, however for simplicity files for both frameworks are kept in directory
sed "s|runname|$runname|g" slurm-script slurm-script-initial -i
sed "s|runname|$runname|g" qsub-script qsub-script-initial -i
# Start and end of the residue sequences that correspond area of docking AND protein sampling
sed -e "s|res1m|$res1m|g" -e "s|res1|$res1|g" -e "s|res2p|$res2p|g" -e "s|res2|$res2|g" -e "s|res3m|$res3m|g" -e "s|res3|$res3|g" -e "s|res4p|$res4p|g" -e "s|res4|$res4|g" -e "s|res5m|$res5m|g" -e "s|res5|$res5|g" -e "s|res6p|$res6p|g" -e "s|res6|$res6|g" -e "s|res7m|$res7m|g" -e "s|res7|$res7|g" -e "s|res8|$res8|g" tconcoord-docking* icm-pockets* -i

echo $dockingregion > restraints
echo $dockingregion > pocket

###################################
# Submit initial job (SLURM/QSUB) #
###################################

#########
# SLURM #
#########
if [ "$framework" == "SLURM" ] ; then
    dir=`pwd`
    echo $dir
    sed "s|xxx|$dir|g" slurm-script-initial -i

    # Catch the ID of the job that is submitted
    jobID=( `sbatch slurm-script-initial` )
    jobID=${jobID[3]}

    echo "This is the job that was ran here: $jobID"

    # Loop until all jobs submitted are done
    while :
    do
        # Check if job is running (this gives a count of the jobs running)
        runningjobsline=`squeue -j $jobID`
        runningjobs=`squeue -j $jobID | egrep -e " R " -e " PD " -c`
        echo "This job is running:"
        echo $runnningjobsline
        echo "Number of jobs running"
        echo $runningjobs

        # As long as the count is not 0, sleep 1 min and loop again
        if [ $runningjobs -gt 0 ] ; then
            echo running
            sleep 1m
        else
            break
        fi
    done

    # remove the slurm output
    rm slurm-$jobID.out
    echo "COMPLETED INITIAL JOB"

########
# QSUB #
########
elif [ "$framework" == "QSUB" ] ; then
    dir=`pwd`
    echo $dir
    sed "s|xxx|$dir|g" qsub-script-initial -i

    # Catch the ID of the job that is submitted
    jobID=( `qsub qsub-script-initial` )
    jobID=${jobID[2]}

    echo "This is the ID of the job submitted: $jobID"

    while :
    do
        # The value of $runningjobs will be 1 if that job is still running,
        # and 0 otherwise
        runningjobs=`qstat -j $jobID | egrep -e "job_number" -c`
        echo $runningjobs

        # As long as the count is not 0, sleep 1 minute and loop again
        if [ $runningjobs -gt 0 ] ; then
            echo running
            sleep 1m
        else
            break
        fi
    done

    # remove the qsub output
    rm $runname*.e* $runname*.o*
    echo "COMPLETED INITIAL JOB"
fi

###################
# Starting rounds #
###################

# Create a backup
mkdir backup-initial
cp * backup-initial
mv PARNIS_AA backup-initial

# Clean up directory
rm $receptor slurm-script qsub-script *.mol2 icm-ligand-dock icm-ligand-dock-refine-score initial.pdb input.cpf tconcoord-docking bbdep00.Nov.sortlib bbind00.Nov sccomp config.psp opus_psp em.mdp concoordinput $receptor-bak initial-docking restraints icm-pockets pocket receptorligandndx tconcoord-docking-lig

echo -e "\t Starting rounds now!"
# Loop over X number of rounds
for((z=1; z<=$noofrounds; z++)); do

    # This will keep track of the round we are in
    x=`expr $z - 1`
    echo $z

    # For the first round only, do this
    if [ $z -eq 1 ] ; then
        echo -e "\t *STARTING ROUND 1*"
        #rm -r tconcoord-stuff-$x
        mkdir tconcoord-stuff-$z
        cp backup-initial/tconcoord-docking tconcoord-stuff-$z
        #cp backup-initial/icm-rigidfit tconcoord-stuff-$z
        cp backup-initial/input.cpf tconcoord-stuff-$z
        cp backup-initial/$ligand.mol2 tconcoord-stuff-$z
        cp backup-initial/icm-ligand-dock tconcoord-stuff-$z
        cp backup-initial/icm-ligand-dock-refine-score tconcoord-stuff-$z
        #cp backup-initial/ndx tconcoord-stuff-$z
        cp backup-initial/initial.pdb tconcoord-stuff-$z
        cp backup-initial/bbdep00.Nov.sortlib tconcoord-stuff-$z
        cp backup-initial/bbind00.Nov tconcoord-stuff-$z
        cp backup-initial/readme.txt tconcoord-stuff-$z
        cp backup-initial/sccomp tconcoord-stuff-$z
        cp backup-initial/PARNIS_AA -r tconcoord-stuff-$z
        cp backup-initial/em.mdp tconcoord-stuff-$z
        cp backup-initial/$receptor tconcoord-stuff-$z
        cp backup-initial/concoordinput tconcoord-stuff-$z
        cp backup-initial/dssp tconcoord-stuff-$z
        cp backup-initial/restraints tconcoord-stuff-$z
        cp backup-initial/pocket tconcoord-stuff-$z
        cp backup-initial/icm-pockets tconcoord-stuff-$z
        cp backup-initial/receptorligandndx tconcoord-stuff-$z
    # For all other rounds after the first one
    else
        echo -e "\t *STARTING ROUND $z*"
        rm -r tconcoord-stuff-$x
        mkdir tconcoord-stuff-$z
        #cp backup-initial/icm-rigidfit tconcoord-stuff-$z
        cp backup-initial/input.cpf tconcoord-stuff-$z
        cp backup-initial/$ligand.mol2 tconcoord-stuff-$z
        cp backup-initial/icm-ligand-dock tconcoord-stuff-$z
        cp backup-initial/icm-ligand-dock-refine-score tconcoord-stuff-$z
        #cp backup-initial/ndx tconcoord-stuff-$z
        cp backup-initial/bbdep00.Nov.sortlib tconcoord-stuff-$z
        cp backup-initial/bbind00.Nov tconcoord-stuff-$z
        cp backup-initial/readme.txt tconcoord-stuff-$z
        cp backup-initial/sccomp tconcoord-stuff-$z
        cp backup-initial/PARNIS_AA -r tconcoord-stuff-$z
        cp backup-initial/em.mdp tconcoord-stuff-$z
        cp backup-initial/$receptor tconcoord-stuff-$z
        cp backup-initial/concoordinput tconcoord-stuff-$z
        cp backup-initial/dssp tconcoord-stuff-$z
        cp backup-initial/restraints tconcoord-stuff-$z
        cp backup-initial/pocket tconcoord-stuff-$z
        cp backup-initial/receptorligandndx tconcoord-stuff-$z
        cp backup-initial/icm-pockets tconcoord-stuff-$z
        # PDB from last round added to new round. The script tconcoord-docking-lig
        # is now used as from round 2 onwards, we deal with a receptor/ligand complex.
        cp filtered/receptor-$x.pdb tconcoord-stuff-$z/initial.pdb
        cp backup-initial/tconcoord-docking-lig tconcoord-stuff-$z/tconcoord-docking
    fi
    echo -e "\t created tconcoord-stuff dir, and copied content of backup-initial files to it"

    ######################################
    # Creating X independant directories #
    ######################################

    echo -e "\t Copying files from tconcoord-stuff to X dirs"

    for((a=1; a<=$dirs; a++)); do
        mkdir $a
        cp -r tconcoord-stuff-$z/* $a
        cd $a
        sed 's/xrandx/'$RANDOM'/g' tconcoord-docking -i
        cd ../
    done

    ################################
    # Job submission within rounds #
    ################################

    #########
    # SLURM #
    #########

    if [ "$framework" == "SLURM" ] ; then
        echo -e "\t Modifying the SLURM commands, and running them"

        # Setting up SLURM jobs
        cp backup-initial/slurm-script ./
        dir=`pwd`
        echo $dir
        sed "s|xxx|$dir|g" slurm-script -i

        # New master script running all '20' at once
        sed "s|MY_DIR_NUMBER|$dirs|g" slurm-script > slurm-script-0

        # In this for loop, all numbered slurm scripts in this directory are
        # submitted, and the variable jobIDs keeps the IDs of all those jobs
        jobIDs=""
        for start in slurm-script-[0-9]*; do
            jobID=( `sbatch $start` )
            echo -e "$jobID"
            jobID=${jobID[3]}
            jobIDs="$jobIDs $jobID"
            sleep 2s
        done

        echo -e "\t Now that they were ran, checking to see when they are finished:"
        echo -e "$jobIDs"

        # This while loop will check every minute if all jobs have finished,
        # using the jobIDs variable and making sure all jobs are completed
        # before moving on
        while :
        do
            runningjobs=0

            # This inner loop will count the number of jobs still running
            # (status R or PD means they are not). A job is done when it returns
            # that its ID is invalid, it is does not count towards that total
            for jobID in $jobIDs; do
                jobIsAlive=`squeue -j $jobID | egrep -e " $jobID " -c`
                #echo "This job"
                #echo $jobID
                #echo $runningjobline
                #echo "---"

                # If runningjobline does not contain the word 'Invalid' (case where the job
                # name does not exist anymore)
                if [ $jobIsAlive -eq 1 ]; then
                    runningjob=`squeue -j $jobID | egrep -e " R " -e " PD " -c`
                    runningjobs=`expr $runningjobs + $runningjob`
                fi
            done

            # Echo the number of jobs still running
            echo $runningjobs
            #runningjobs=`squeue -n $runname | egrep -e " R " -e " PD " -c`
            #echo $runningjobs
            # When the jobs count still running hits 0, break the while loop
            if [ $runningjobs -gt 0 ] ; then
                echo running
                sleep 1m
            else
                break
            fi
        done

    ########
    # QSUB #
    ########

    elif [ "$framework" == "QSUB" ] ; then
        echo -e "\t Modifying the QSUB commands, and running them"

        # Setting up QSUB jobs
        cp backup-initial/qsub-script ./
        dir=`pwd`
        echo $dir
        sed "s|xxx|$dir|g" qsub-script -i

        for((b=1; b<=$dirs; b++)); do
            sed "s|yyy|$b|g" qsub-script > qsub-script-$b
        done

        # In this for loop, all numbered qsub scripts in this directory are submitted,
        # and the variable jobIDs keeps the IDs of all those jobs
        jobIDs=""
        for start in qsub-script-[0-9]*; do
            jobID=( `qsub $start` )
            echo -e "$jobID"
            jobID=${jobID[2]}
            jobIDs="$jobIDs $jobID"
            sleep 2s
        done

        echo -e "\t Now that they were ran, checking to see when they are finished:"
        echo -e "$jobIDs"

        while :
        do
            runningjobs=0

            # A job running or queued will be found in the queue, and will have
            # the keyword "job_number" present when qstat -j $jobID is ran
            for jobID in $jobIDs; do
                runningjob=`qstat -j $jobID | egrep -e "job_number" -c`
                runningjobs=`expr $runningjobs + $runningjob`
            done

            echo $runningjobs

            # If the number of jobs still running is greater than 0, then keep
            # running for 1 more minute
            if [ $runningjobs -gt 0 ] ; then
                echo running
                sleep 1m
            else
                break
            fi

        done
    fi

    echo "############################################"
    echo "# Scoring based on ICM and OPUS_PSP scores #"
    echo "############################################"

    # Getting icmscore of complexes in:
    # - all directories
    # - within this this replica
    # - for this round ($z)
    # Place those in a new directory 'icmscore'
    rm -r icmscore
    mkdir icmscore
    for jobdir in [0-9]*; do
        cd $jobdir
        for file in receptor*score; do
            grep "SCORE" $file | awk '{print $21}' > $jobdir-$file-score
            mv $jobdir-$file-score ../icmscore
        done
        cd ../
        echo $jobdir
    done

    # Get the name of the complex that has the best icmscore
    cd icmscore
    grep "[0-9]" *score | sed -e 's/:/: /g' -e 's/.score-score:/-rl.pdb/g' | sort +1 -2 -r -g | tail -n 1 | awk '{print $1}' > best
    cp best ../
    cd ../

    # Copy that best icmscore complex to filtered-tmp
    mkdir filtered
    rm -r filtered-tmp
    mkdir filtered-tmp
    sed -e 's/-receptor/\/receptor/g' -e 's/[0-9].*/cp &/g' best > a
    sed -e "s|[0-9].*|filtered-tmp\/&|g" best > b
    paste a b -d " " > c
    sh c
    rm a b c best

    # Applying OPUS_PSP score on that best icmscore complex
    cd filtered-tmp
    cp ../backup-initial/opus_psp ./
    cp ../backup-initial/config.psp ./
    sed 's/HIE/HIS/g' *pdb -i
    ls *pdb > in
    ./opus_psp < in > out

    # Moving the complex to the filtered directory
    grep receptor out | sort +1 -2 -r -g | tail -n 1 | awk '{print $1}' | sed "s|[0-9].*|mv &* \.\.\/filtered\/receptor-$z.pdb|g" > move
    sh move

    # Append ICMSCORE and OPUS_PSP scores to icm-running-best and
    # opus-running-best files, respectively
    grep receptor out | sort +1 -2 -r -g | tail -n 1 | awk '{print $1}' | sed 's/[0-9].*/grep "[0-9]" \.\.\/icmscore\/&*/g' > icm
    echo receptor-$z.pdb `sh icm` >> ../icm-running-best
    grep receptor out | sort +1 -2 -r -g | tail -n 1 | awk '{print $1}' | sed 's/[0-9].*/grep & out/g' > opus
    echo receptor-$z.pdb `sh opus | awk '{print $2}'` >> ../opus-running-best
    cd ../
    rm -r filtered-tmp
    rm -r icmscore

    #########################################
    # Get rid of unwanted SLURM/QSUB output #
    #########################################

    if [ "$framework" == "SLURM" ] ; then
        rm slurm-script-[0-9]*
    elif [ "$framework" == "QSUB" ] ; then
        rm qsub-script-[0-9]*
    fi
    rm *.[eo]*
    rm -r icmscore
    rm -r [0-9]*

    ################################################################
    # Preparing for a new round and getting tms from best solution #
    ################################################################

    cd filtered
    sed -e 's/HIE/HIS/g'  -e "s|$ligandname|LIG|g" -e 's/HETATM/ATOM  /g' receptor-$z.pdb -i
    editconf -f receptor-$z.pdb -o receptor-$z.pdb -label " "
    rm *receptor-$z.pdb.1*
    cd ../
    rm -r  tconcoord-stuff-$z

done

#################
# Final cleanup #
#################
rm slurm-script*
rm qsub-script*
#rm *.[eo]*
#rm -r icmscore
#rm -r [0-9]*
rm -r backup-initial
